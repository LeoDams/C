	/*>> DOCUMENTAÇÃO DO PROGRAMA << - DESENVOLVEDORES - LEANDRO / JORDY / CÁCIO
        1.0 A FUNÇÃO TELA GERA AS MATRIZES COM AS POSIÇÕES E COM UM ÍNDICE
            1.1 FUNÇÃO TELA É RESPONSAVEL POR INTERAÇÕES DE AÇÃO
        2.0 A FUNÇÃO MAIN GERA OS ALEATÓRIOS QUE PREENCHEM A FUNÇÃO TELA
            2.1 GERA ALEATÓRIOS DO COMPUTADOR E OCULTA
            2.2 GERA ALEATÓRIOS DO JOGADOR E EXIBE AO MESMO
            2.3 PERGUNTA AO JOGADOR ONDE ATACAR
                2.3.1 SE ACERTOU SOMA PONTO DO JOGADOR (+1)
                2.3.2 SE ERROU MOSTRA AGUA (x)
                2.3.3 SE ERRO = ALGUMA POSIÇÃO DO JOGADOR, COMPUTADOR ATACA NA POSIÇÃO
            2.4 GERA ALEATÓRIOS DE ATAQUE DO COMPUTADOR
            2.5 COMPUTADOR ATACA (AUTOMÁTICO EM 2.4)
                2.5.1 SE ACERTOU SOMA PONTO COMPUTADOR (+1)
                2.5.2 SE ACERTOU, POSIÇÃO DO JOGADOR VIRA X (XIS MAÍUSCULO)
                2.5.3 SE ERROU REVELA AGUA (x)
                2.5.4 SE USOU MESMA COORDENADA DE POSIÇÃO, NADA FAZ
                2.5.5 PASSA A VEZ PARA O JOGADOR.
                2.5.6 QUEM CHEGAR PRIMEIRO A 3 PONTOS, VENCE*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#define DIM 10

//IMPRIME O INDICE E A MATRIZ DO JOGADOR + COMPUTADOR NA TELA//
/*1.0*/ void tela (char m[][DIM], char v[][DIM], int acertoc, int acertoj){
	system("cls");
	printf( "\n                                                                                            BATALHA NAVAL                     \n");                  printf("                    ");
	printf( "\n");                  printf("                    ");
	printf( "    |                                 Jogador                                ||                                  Computador                            |\n");                  printf("                    ");
    printf( "    |    0      1      2      3      4      5      6      7      8      9    ||    0      1      2      3      4      5      6      7      8      9    |\n");                  printf("                    ");
    printf(	"   0| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[0][0],m[0][1],m[0][2],m[0][3],m[0][4],m[0][5],m[0][6],m[0][7],m[0][8],m[0][9],v[0][0],v[0][1],v[0][2],v[0][3],v[0][4],v[0][5],v[0][6],v[0][7],v[0][8],v[0][9]	);                  printf("                    ");

    printf(	"   1| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[1][0],m[1][1],m[1][2],m[1][3],m[1][4],m[1][5],m[1][6],m[1][7],m[1][8],m[1][9],v[1][0],v[1][1],v[1][2],v[1][3],v[1][4],v[1][5],v[1][6],v[1][7],v[1][8],v[1][9]	);                  printf("+------------------+");
    printf(	"   2| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[2][0],m[2][1],m[2][2],m[2][3],m[2][4],m[2][5],m[2][6],m[2][7],m[2][8],m[2][9],v[2][0],v[2][1],v[2][2],v[2][3],v[2][4],v[2][5],v[2][6],v[2][7],v[2][8],v[2][9]);                   printf("|    Legenda       |");

    printf(	"   3| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[3][0],m[3][1],m[3][2],m[3][3],m[3][4],m[3][5],m[3][6],m[3][7],m[3][8],m[3][8],v[3][0],v[3][1],v[3][2],v[3][3],v[3][4],v[3][5],v[3][6],v[3][7],v[3][8],v[3][8]	);                  printf("+-----+------------+");

    printf(	"   4| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[4][0],m[4][1],m[4][2],m[4][3],m[4][4],m[4][5],m[4][6],m[4][7],m[4][8],m[4][9],v[4][0],v[4][1],v[4][2],v[4][3],v[4][4],v[4][5],v[4][6],v[4][7],v[4][8],v[4][9]	);                  printf("|  x  |  Agua      |");

    printf(	"   5| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[5][0],m[5][1],m[5][2],m[5][3],m[5][4],m[5][5],m[5][6],m[5][7],m[5][8],m[5][9],v[5][0],v[5][1],v[5][2],v[5][3],v[5][4],v[5][5],v[5][6],v[5][7],v[5][8],v[5][9]	);                  printf("|  @  |  Submarino |");

    printf(	"   6| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[6][0],m[6][1],m[6][2],m[6][3],m[6][4],m[6][5],m[6][6],m[6][7],m[6][8],m[6][9],v[6][0],v[6][1],v[6][2],v[6][3],v[6][4],v[6][5],v[6][6],v[6][7],v[6][8],v[6][9]	);                  printf("|  >  |  Lancha    |");

    printf(	"   7| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[7][0],m[7][1],m[7][2],m[7][3],m[7][4],m[7][5],m[7][6],m[7][7],m[7][8],m[7][9],v[7][0],v[7][1],v[7][2],v[7][3],v[7][4],v[7][5],v[7][6],v[7][7],v[7][8],v[7][9]	);                  printf("|  &  |  Fragata   |");

    printf(	"   8| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[8][0],m[8][1],m[8][2],m[8][3],m[8][4],m[8][5],m[8][6],m[8][7],m[8][8],m[8][9],v[8][0],v[8][1],v[8][2],v[8][3],v[8][4],v[8][5],v[8][6],v[8][7],v[8][8],v[8][9] );                  printf("+-----+------------+");

    printf(	"   9| %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    || %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .   %c  .    |\n",
		m[9][0],m[9][1],m[9][2],m[9][3],m[9][4],m[9][5],m[9][6],m[9][7],m[9][8],m[9][9],v[9][0],v[9][1],v[9][2],v[9][3],v[9][4],v[9][5],v[9][6],v[9][7],v[9][8],v[9][9]	);                  printf("                    ");

	printf( "    |    0      1      2      3      4      5      6      7      8      9    ||    0      1      2      3      4      5      6      7      8      9    |\n");                  printf("                    ");
	printf("\n\t\t                                   Pontos JOGADOR %d                      \t",acertoj);	printf("                             pontos COMPUTADOR  %d                \t",acertoc);

	if (acertoj==1){printf("\n\n\t\t\t Ohh nao, voce acertou um dos meus ");}
    if (acertoj==2){printf("\n\n\t\t\t Nao acredito, voce esta me derrotando! ");}
    if (acertoj==3){printf("\n\n\t\t\t Eu lhe subestimei, VOCE VENCEU! "); printf("\n\n"); exit(0);}

}
/*2.0*/ void  main (){
	char m[DIM][DIM];char v[DIM][DIM];char b[DIM][DIM];char p[DIM][DIM];                  /*Declaração de matrizes na função MAIN*/
	int x,y,acertoc = 0, acertoj = 0;
	for (x = 0; x<=DIM; x++){
		for (y=0; y<=DIM; y++){
			v[x][y]= ' ';
			m[x][y]= ' ';
			b[x][y]= ' ';
			p[x][y]= ' ';     }}

	 int a,i,c,d,s1,s2,s3,s4,f,g,f1,f2,f3,f4,l1,l2,l3,l4,t=0,z=0,linha,lifec=3,lifej=3,coluna,matriz[DIM][DIM],matriz2[DIM][DIM];char n;

/*2.1*/srand( (unsigned)time(NULL) );                                                    /*Gera aleatórios para as posições do computador*/
    for(i=1 ; i <= 9 ; i++)
        s1=rand()%i;l1=rand()%i;f1=rand()%i;
            if (s1!=f1){s1=s1;}else{{s1=rand()%i;}}                                     /*Se uma combinação sair igual a outra gera uma nova*/
            if (f1!=l1){f1=f1;}else{{f1=rand()%i;}}                                     /*Combinações terminadas em 1 e 2, sao do PC*/
            if (s1!=l1){l1=l1;}else{{l1=rand()%i;}}

/*2.1*/srand( (unsigned)time(NULL) );
    for(c=4 ; c <= 9 ; c++)
        s2=rand()%c;l2=rand()%c;f2=rand()%c;
            if (s2!=f2){s2=s2;}else{{s2=rand()%c;}}                                      /*Se uma combinação sair igual a outra gera uma nova*/
            if (f2!=l2){f2=f2;}else{{f2=rand()%c;}}                                      /*Combinações terminadas em 1 e 2, sao do PC*/
            if (s2!=l2){l2=l2;}else{{l2=rand()%c;}}

/*2.2*/srand( (unsigned)time(NULL) );                                                    /*Gera aleatórios para as posições do jogador*/
    for(i=5 ; i <= 9 ; i++)
        s3=rand()%i;l3=rand()%i;f3=rand()%i;
            if (s3!=f3){s3=s3;}else{{s3=rand()%i;}}                                      /*Se uma combinação sair igual a outra gera uma nova*/
            if (f3!=l3){f3=f3;}else{{f3=rand()%i;}}                                      /*Combinações terminadas em 3 e 4, sao do Jogador*/
            if (s3!=l3){l3=l3;}else{{l3=rand()%i;}}

/*2.2*/srand( (unsigned)time(NULL) );
    for(c=7 ; c <= 9 ; c++)
        s4=rand()%c;l4=rand()%c;f4=rand()%c;
            if (s4!=f4){s4=s4;}else{{s4=rand()%c;}}                                      /*Se uma combinação sair igual a outra gera uma nova*/
            if (f4!=l4){f4=f4;}else{{f4=rand()%c;}}                                      /*Combinações terminadas em 3 e 4, sao do Jogador*/
            if (s4!=l4){l4=l4;}else{{l4=rand()%c;}}

    b[s1][s2]='@';b[f1][f2]='&';b[l1][l2]='%';                                           /*Indice para as posições do computador*/
    p[s3][s4]='q';p[f3][f4]='w';p[l3][l4]='s';                                           /*Indice para as posições do Jogador*/

	for (x=0;x<10;x++){for (y=0;y<10;y++)                                                /*Preenche símbolos na tela do Jogador*/
        {
		if (p[x][y] == 'q'){m[x][y] = '@';}                                              /*Se igual ao indice, preenche símbolo*/
        if (p[x][y] == 'w'){m[x][y] = '&';}
        if (p[x][y] == 's'){m[x][y] = '>';}
        }
        tela(m,v,acertoc,acertoj);}                                                       /*Chama a função tela*/

/*2.3 - AÇÃO DO JOGADOR        */
         for (;;) {if (z>0)                     {printf("\n\n\t\t\t O Computador jogou %d,%d e",f,g);
         if (z==5){printf(" acertou");}if (z==1){printf(" errou");z=0;}}                /*Informa onde o computador jogou e se errou ou acertou*/
         if (t==0){printf("\n\t\t\t  Sua pesca para testar (Anote)"); printf("\n\t\t\t   Submarino %d,%d",s1,s2);
                   printf("\n\t\t\t   Fragata   %d,%d",f1,f2);        printf("\n\t\t\t   Lancha    %d,%d",l1,l2);}
                   printf("\n\n\t\t\t [x] = ");scanf("%d",&x); t++;   printf("\n\t\t\t [y] = ");scanf("%d",&y);
		if (b[x][y] == '@'){v[x][y] = '@';acertoj++;a=a+1;}                               /*2.3.1 - Se igual ao indice, preenche símbolo e soma acerto*/
        if (b[x][y] == '&'){v[x][y] = '&';acertoj++;a=a+1;}
        if (b[x][y] == '%'){v[x][y] = '>';acertoj++;a=a+1;}
        if ((p[x][y]!= 'q')&&(p[x][y]!= 'w')&&(p[x][y]!= 's'))                           /*2.3.0 - Se coordenadas forem iguais as do jogador, não substitui por x*/
        if ((b[x][y]!= '%')&&(b[x][y]!= '@')&&(b[x][y]!= '&')){m[x][y] = 'x';}           /*2.3.2 - Se Diferente do indice, preenche símbolo Água e soma erro*/
        tela(m,v,acertoc,acertoj);                                                       /*Chama a função tela*/

/*2.4 - AÇÕES ALEATÓRIAS DO COMPUTADOR*/
        srand( (unsigned)time(NULL) );
        if ((x==0)||(y==0)){x=2;y=7;}
        for(x=x ; x <= 9 ; x++)
            for(y=1 ; y <= 9 ; y++)
        f=rand()%x;g=rand()%y;
		if (b[f][g] == 'q'){v[f][g] = 'X';acertoc++;z=5;}                                 /*Se igual ao indice, preenche símbolo e soma acerto*/
        if (b[f][g] == 'w'){v[f][g] = 'X';acertoc++;z=5;}
        if (b[f][g] == 's'){v[f][g] = 'X';acertoc++;z=5;}
        if ((p[f][g]!= 'q')&&(p[f][g]!= 'w')&&(p[f][g]!= 's'))                           /*Se coordenadas forem iguais as do jogador, não substitui por x*/
        if ((b[f][g]!= 'q')&&(b[f][g]!= 'w')&&(b[f][g]!= 's')){v[f][g] = 'x';z=z+1;}
        tela(m,v,acertoc,acertoj);                                                       /*Se Diferente do indice, preenche símbolo Água e soma erro*/
        }
	}
